name: CI/CD Pipeline

# Pipeline de integración continua y despliegue
# Se ejecuta en pull requests y pushes a las ramas principales

on:
    pull_request:
        branches: [master, main]
    push:
        branches: [master, main]

jobs:
    # Job principal: Puertas de calidad
    # Ejecuta linting, pruebas y builds para validar el código
    quality-gates:
        name: Quality Gates
        runs-on: ubuntu-latest

        steps:
            # Paso 1: Obtener el código del repositorio
            - name: Checkout code
              uses: actions/checkout@v4

            # Paso 2: Configurar Node.js 20 LTS
            - name: Setup Node.js 20
              uses: actions/setup-node@v4
              with:
                  node-version: "20"
                  cache: "npm"

            # Paso 3: Instalar dependencias del proyecto raíz
            - name: Install root dependencies
              run: npm ci

            # Paso 4: Instalar dependencias del cliente React
            - name: Install client dependencies
              run: cd client && npm ci

            # Paso 5: Verificar código del backend con ESLint
            - name: Lint backend
              run: npm run lint

            # Paso 6: Verificar código del frontend con ESLint
            - name: Lint frontend
              run: npm run lint:client

            # Paso 7: Ejecutar pruebas unitarias del backend
            - name: Run backend tests
              run: npm test -- --selectProjects backend --coverage

            # Paso 8: Ejecutar pruebas unitarias del frontend
            - name: Run frontend tests
              run: npm test -- --selectProjects client --coverage

            # Paso 9: Construir frontend localmente para verificar
            - name: Build frontend locally
              run: cd client && npm run build

            # Paso 10: Construir imágenes Docker para verificar
            - name: Build Docker images
              run: npm run docker:build:all

            # Paso 11: Subir cobertura de pruebas a Codecov (opcional)
            - name: Upload coverage to Codecov (optional)
              uses: codecov/codecov-action@v3
              with:
                  files: ./coverage/coverage-final.json
                  flags: unittests
                  name: codecov-umbrella

    # Job secundario: Despliegue preview
    # Solo se ejecuta en pull requests para crear un preview del frontend
    deploy-preview:
        name: Deploy Preview (Vercel)
        runs-on: ubuntu-latest
        needs: quality-gates
        if: github.event_name == 'pull_request'

        steps:
            # Paso 1: Obtener el código del repositorio
            - name: Checkout code
              uses: actions/checkout@v4

            # Paso 2: Configurar Node.js 20 LTS
            - name: Setup Node.js 20
              uses: actions/setup-node@v4
              with:
                  node-version: "20"

            # Paso 3: Instalar dependencias del cliente React
            - name: Install client dependencies
              run: cd client && npm ci

            # Paso 4: Construir frontend para preview
            - name: Build frontend
              run: cd client && npm run build

            # Paso 5: Desplegar preview a Vercel
            - name: Deploy to Vercel Preview
              uses: amondnet/vercel-action@v25
              with:
                  vercel-token: ${{ secrets.VERCEL_TOKEN }}
                  vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
                  vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
                  working-directory: ./public
                  scope: ${{ secrets.VERCEL_ORG_ID }}
