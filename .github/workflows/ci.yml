name: CI/CD Pipeline

on:
    push:
        branches: [main, develop]
    pull_request:
        branches: [main, develop]
    release:
        types: [published]

env:
    NODE_VERSION: "18"
    REGISTRY: ghcr.io
    IMAGE_NAME: ${{ github.repository }}

jobs:
    # Job 1: Lint and Code Quality
    lint:
        name: Lint and Code Quality
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  cache: "npm"

            - name: Install dependencies
              run: |
                  npm ci
                  cd client && npm ci

            - name: Lint backend
              run: npm run lint

            - name: Lint client
              run: npm run lint:client

    # Job 2: Unit Tests
    unit-tests:
        name: Unit Tests
        runs-on: ubuntu-latest
        needs: lint
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  cache: "npm"

            - name: Install dependencies
              run: |
                  npm ci
                  cd client && npm ci

            - name: Run backend unit tests
              run: npm test

            - name: Run client unit tests
              run: npm run test:client

    # Job 3: Integration Tests
    integration-tests:
        name: Integration Tests
        runs-on: ubuntu-latest
        needs: unit-tests
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  cache: "npm"

            - name: Install dependencies
              run: npm ci

            - name: Start services for integration tests
              run: |
                  docker compose -f docker-compose.test.yml up -d
                  sleep 30  # Wait for services to be ready

            - name: Run integration tests
              run: npm test -- --testPathPattern=integration
              env:
                  NODE_ENV: test

            - name: Stop services
              if: always()
              run: docker compose -f docker-compose.test.yml down

    # Job 4: Build Docker Image
    build:
        name: Build Docker Image
        runs-on: ubuntu-latest
        needs: integration-tests
        outputs:
            image-digest: ${{ steps.build.outputs.digest }}
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Log in to Container Registry
              uses: docker/login-action@v3
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Extract metadata
              id: meta
              uses: docker/metadata-action@v5
              with:
                  images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
                  tags: |
                      type=ref,event=branch
                      type=ref,event=pr
                      type=semver,pattern={{version}}
                      type=semver,pattern={{major}}.{{minor}}
                      type=raw,value=latest,enable={{is_default_branch}}

            - name: Build and push Docker image
              id: build
              uses: docker/build-push-action@v5
              with:
                  context: .
                  push: true
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=max

    # Job 5: Smoke Tests
    smoke-tests:
        name: Smoke Tests
        runs-on: ubuntu-latest
        needs: build
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Start services for smoke tests
              run: |
                  docker compose -f docker-compose.smoke.yml up -d
                  sleep 30  # Wait for services to be ready

            - name: Run smoke tests
              run: npm run smoke:test

            - name: Stop services
              if: always()
              run: docker compose -f docker-compose.smoke.yml down

    # Job 6: Deploy (Manual Approval Required)
    deploy:
        name: Deploy to Production
        runs-on: ubuntu-latest
        needs: [build, smoke-tests]
        if: github.event_name == 'release' && github.event.action == 'published'
        environment: production
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Deploy to production
              run: |
                  echo "Deploying to production..."
                  echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.release.tag_name }}"
                  # Add your deployment commands here
                  # Example: kubectl set image deployment/arbitrator arbitrator=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.release.tag_name }}
